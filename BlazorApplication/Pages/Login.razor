@page "/login"
@inject AuthStateProvider authProvider
@inject NavigationManager navigationManager

<h3>Login Page</h3>

<EditForm Model="model" OnValidSubmit="AuthorizeUserAsync" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="username" class="col-md-2 col-form-label">Username:</label>
        <div class="col-md-10">
            <InputText id="username" class="form-control" @bind-Value="model.Username" />
            <ValidationMessage For="@(()=> model.Username)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" />
            <ValidationMessage For="@(()=> model.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>

@code {
    private LoginUserInputModel model = new LoginUserInputModel();

    private async Task AuthorizeUserAsync()
    {
        var state = await authProvider.GetAuthenticationStateAsync();
        var token = await authProvider.SignInAsync(model);
        if (token != null)
        {
            StateHasChanged();
            navigationManager.NavigateTo($"/");
        }
    }
}
